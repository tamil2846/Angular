import {createAction, props} from "@ngrx/store";
import {IPosts} from "../shared/posts.interface";

export const actions={
  login:createAction('login', props<{value:any}>()),
  loginSuccess:createAction('loginSuccess'),
  loginFailure:createAction('loginFailure'),
  register:createAction('register', props<{value:any}>()),
  registerSuccess:createAction('registerSuccess'),
  registerFailure:createAction('registerFailure'),
  drawerOpen:createAction('drawerOpen', props<{hasEdit:boolean}>()),
  drawerClose:createAction('drawerClose'),
  getPosts:createAction('getPosts', props<{pageNo:number,value:string,order:string}>()),
  getPostsSuccess:createAction('getPostsSuccess', props<{posts:any}>()),
  getPostsFailure:createAction('getPostsFailure'),
  addPost:createAction('addPost', props<{value:any}>()),
  addPostSuccess:createAction('addPostSuccess', props<{post:IPosts[]}>()),
  addPostFailure:createAction('addPostFailure'),
  editPost:createAction('editPost', props<{value:any, id:number}>()),
  editPostSuccess:createAction('editPostSuccess', props<{post:any, id:number}>()),
  editPostFailure:createAction('editPostFailure'),
  deletePost:createAction('deletePost', props<{value:any}>()),
  deletePostSuccess:createAction('deletePostSuccess', props<{post:any}>()),
  deletePostFailure:createAction('deletePostFailure'),
  getBlog:createAction('getBlog', props<{id:any}>()),
  getBlogSuccess:createAction('getBlogSuccess', props<{blog:any}>()),
  getBlogFailure:createAction('getBlogFailure'),
  publishPost:createAction('publishblog', props<{id:number, isPublish:boolean}>()),
  publishPostSuccess:createAction('publishPostSuccess', props<{id:number, isPublish:boolean}>()),
  publishPostFailure:createAction('publishPostFailure'),
  modelOpen:createAction('modelOpen'),
  modelClose:createAction('modelClose'),
  profileUpdate:createAction('profileUpdate',props<{value:any}>()),
  profileUpdateSuccess:createAction('profileUpdateSuccess'),
  profileUpdateFailure:createAction('profileUpdateFailure'),
  publicPost:createAction('publicPost', props<{offSet:number, value:string}>()),
  publicPostSuccess:createAction('publicPostSuccess',props<{publicPost:IPosts[],offSet:number}>()),
  publicPostFailure:createAction('publicPostFailure'),
  getPublishBlog:createAction('getPublishBlog',props<{id:number}>()),
  getPublishBlogSuccess:createAction('getPublishBlogSuccess',props<{blog:any}>()),
  getPublishBlogFailure:createAction('getPublishBlogFailure'),
  addBlogComments:createAction('addBlogComments', props<{id:number, value:any}>()),
  addBlogCommentsSuccess:createAction('addBlogCommentsSuccess' ,props<{comment:any}>()),
  addBlogCommentsFailure:createAction('addBlogCommentsFailure' ),
  deleteBlogComments:createAction('deleteBlogComments', props<{id:number}>()),
  deleteBlogCommentsSuccess:createAction('deleteBlogCommentsSuccess' ,props<{id:number}>()),
  deleteBlogCommentsFailure:createAction('deleteBlogCommentsFailure'),
  editBlogComments:createAction('editBlogComments', props<{id:number, value:any}>()),
  editBlogCommentsSuccess:createAction('editBlogCommentsSuccess' ,props<{id:number,comment:any}>()),
  editBlogCommentsFailure:createAction('editBlogCommentsFailure'),
  blogClap:createAction('blogClap', props<{id:number}>()),
  blogClapSuccess:createAction('blogClapSuccess'),
  blogClapFailure:createAction('blogClapFailure'),
};
